
// sizing

$content-width: 1200px;

// fonts

$heading-font: 'futura-pt', 'Futura', sans-serif;
$sub-heading-font: 'termina', 'futura pt', sans-serif;
$font-style: 'futura-pt', 'Futura', sans-serif;
$main-font: 'Inter', 'Helvetica', 'Arial', sans-serif;

// colors (OLD, keep for posterity cause i don't want to refactor anything yet)
$main: #ca9a2c;
$bg: #fafafa;
$mf-green: #0a2216;
$font-color: #404040;
$link-color: #404040;
$heading-font-color: #ca9a2c;
$link-hover-color: rgba($heading-font-color, .5);
$link-underline-color: #4fb2e4;
$light: #eceadd;
$mid: #878878;
$header: #0a2216;

$homepage-title-link-unhover: 0px -20px 0px;
$homepage-title-link-hover: 0px -90px 0px;


// colors NEW AND IMPROVED

// index

$grey0: #FFFFFF;
$grey25: #fafafa;
$grey50: #f2f2f2;
$grey100: #e0e0e0;
$grey400: #a4a4a4;
$grey500: #8e8e92;
$grey600: #404040;
$grey900: #1c1c1d;
$grey1000: #000000; 

$gold500: #CA9A2C;

$green800: #0A2216;

$blue200: #4FB2E4;

$primary500: $gold500;

// semantic 

$color_content_primary_A: $grey600;
$color_content_primary_B: $grey25;
$color_content_secondary: $grey500;

$color_content_primary_A__interactive: $grey400;
$color_content_primary_B__interactive: $grey400;
$color_content_secondary__interactive: $grey600;



//mixins


@mixin hocus {
    &:hover,
    &:active,
    &:focus {
        @content;
    }
}


/* prefixes */
/// Mixin to prefix a property
/// @author Hugo Giraudel
/// @param {String} $property - Property name
/// @param {*} $value - Property value
/// @param {List} $prefixes (()) - List of prefixes to print

@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }
 
  // Output standard non-prefixed declaration
  #{$property}: $value;
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin inline-flexbox() {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: -webkit-inline-flex;
  display: inline-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}


// media queries


$huge: 1200px;
$big: 1000px;
$tablet: 768px;
$tween: 650px;
$medium: 550px;
$small: 400px;
$short: 767px; 


@mixin huge {
  @media (min-width: #{$huge}) {
    @content;
  }
}

@mixin big {
  @media (min-width: #{$big}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$tablet} + 1) {
    @content;
  }
}

@mixin tablet-up {
  @media (min-width: #{$tablet}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$tablet}) {
    @content;
  }
}


@mixin tablet-up {
  @media (max-width: #{$big}) {
    @content;
  }
}

@mixin tween-up {
  @media (min-width: #{$tween}) {
    @content;
  }
}

@mixin tween {
  @media (max-width: #{$tween}) {
    @content;
  }
}

@mixin medium {
  @media (max-width: #{$medium}) {
    @content;
  }
}

@mixin medium-up {
  @media (min-width: #{$medium} + 1) {
    @content;
  }
}

@mixin small {
  @media (max-width: #{$small}) {
    @content;
  }
}

@mixin mobile-landscape {
  @media screen and (max-width: #{$small}) and (max-width: #{$tablet}) and (orientation: landscape) {
    @content;
  }
}


@mixin extra-short {
  @media (max-height: "#{$medium}") {
    @content;
  }
}

@mixin short {
  @media (max-height: "#{$short}") {
    @content;
  }
}




// resets

*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}